=== tests/cases/compiler/promisesWithConstraints.ts ===
interface Promise_<T> {
>Promise_ : Promise_<T>
>T : T

    then<U>(cb: (x: T) => Promise_<U>): Promise_<U>;
>then : <U>(cb: (x: T) => Promise_<U>) => Promise_<U>
>U : U
>cb : (x: T) => Promise_<U>
>x : T
>T : T
>Promise_ : Promise_<T>
>U : U
>Promise_ : Promise_<T>
>U : U
}

interface CPromise<T extends { x: any; }> {
>CPromise : CPromise<T>
>T : T
>x : any

    then<U extends { x: any; }>(cb: (x: T) => Promise_<U>): Promise_<U>;
>then : <U extends { x: any; }>(cb: (x: T) => Promise_<U>) => Promise_<U>
>U : U
>x : any
>cb : (x: T) => Promise_<U>
>x : T
>T : T
>Promise_ : Promise_<T>
>U : U
>Promise_ : Promise_<T>
>U : U
}

interface Foo { x; }
>Foo : Foo
>x : any

interface Bar { x; y; }
>Bar : Bar
>x : any
>y : any

var a: Promise_<Foo>;
>a : Promise_<Foo>
>Promise_ : Promise_<T>
>Foo : Foo

var b: Promise_<Bar>;
>b : Promise_<Bar>
>Promise_ : Promise_<T>
>Bar : Bar

a = b; // ok
>a = b : Promise_<Bar>
>a : Promise_<Foo>
>b : Promise_<Bar>

b = a; // ok
>b = a : Promise_<Foo>
>b : Promise_<Bar>
>a : Promise_<Foo>

var a2: CPromise<Foo>;
>a2 : CPromise<Foo>
>CPromise : CPromise<T>
>Foo : Foo

var b2: CPromise<Bar>;
>b2 : CPromise<Bar>
>CPromise : CPromise<T>
>Bar : Bar

a2 = b2; // ok
>a2 = b2 : CPromise<Bar>
>a2 : CPromise<Foo>
>b2 : CPromise<Bar>

b2 = a2; // was error
>b2 = a2 : CPromise<Foo>
>b2 : CPromise<Bar>
>a2 : CPromise<Foo>

