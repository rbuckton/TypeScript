tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(1,15): error TS2300: Duplicate identifier 'Promise'.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,11): error TS2304: Cannot find name 'async'.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,18): error TS2304: Cannot find name 'a'.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,37): error TS1005: ',' expected.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,39): error TS2300: Duplicate identifier 'Promise'.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,46): error TS1005: '=' expected.
tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts(6,53): error TS1109: Expression expected.


==== tests/cases/conformance/async/downlevel/asyncArrowFunction/asyncArrowFunction9.ts (7 errors) ====
    declare class Promise<T> {
                  ~~~~~~~
!!! error TS2300: Duplicate identifier 'Promise'.
        constructor(init: (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void);
        then<TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>): Promise<TResult>;
    }
    
    var foo = async (a = await => await): Promise<void> => {
              ~~~~~
!!! error TS2304: Cannot find name 'async'.
                     ~
!!! error TS2304: Cannot find name 'a'.
                                        ~
!!! error TS1005: ',' expected.
                                          ~~~~~~~
!!! error TS2300: Duplicate identifier 'Promise'.
                                                 ~
!!! error TS1005: '=' expected.
                                                        ~~
!!! error TS1109: Expression expected.
    }