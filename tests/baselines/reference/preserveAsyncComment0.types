=== tests/cases/conformance/async/downlevel/preserveAsyncComment/preserveAsyncComment0.ts ===
declare class Promise<T> {
>Promise : Promise<T>
>T : T

    constructor(init: (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void);
>init : (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void
>resolve : (value?: T | IPromise<T>) => void
>value : T | IPromise<T>
>T : T
>IPromise : IPromise<T>
>T : T
>reject : (reason?: any) => void
>reason : any

    then<TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>): Promise<TResult>;
>then : <TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>) => Promise<TResult>
>TResult : TResult
>onfulfilled : (value: T) => TResult | IPromise<TResult>
>value : T
>T : T
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>onrejected : (reason: any) => TResult | IPromise<TResult>
>reason : any
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>Promise : Promise<T>
>TResult : TResult
}

async function func(): Promise<void> {
>func : () => Promise<void>
>Promise : Promise<T>

  // variable statement
  var a = 1;
>a : number

  var /*variable decl*/ b = 1;
>b : number

  var c = /*variable decl*/ 1;
>c : number
}

 function func1(): void {
>func1 : () => void

  // variable statement
  var a = 1;
>a : number

  var /*variable decl*/ b = 1;
>b : number

  var c = /*variable decl*/ 1;
>c : number
}

