=== tests/cases/conformance/async/downlevel/awaitTryStatement/awaitTryStatement12.ts ===
declare class Promise<T> {
>Promise : Promise<T>
>T : T

    constructor(init: (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void);
>init : (resolve: (value?: T | IPromise<T>) => void, reject: (reason?: any) => void) => void
>resolve : (value?: T | IPromise<T>) => void
>value : T | IPromise<T>
>T : T
>IPromise : IPromise<T>
>T : T
>reject : (reason?: any) => void
>reason : any

    then<TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>): Promise<TResult>;
>then : <TResult>(onfulfilled?: (value: T) => TResult | IPromise<TResult>, onrejected?: (reason: any) => TResult | IPromise<TResult>) => Promise<TResult>
>TResult : TResult
>onfulfilled : (value: T) => TResult | IPromise<TResult>
>value : T
>T : T
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>onrejected : (reason: any) => TResult | IPromise<TResult>
>reason : any
>TResult : TResult
>IPromise : IPromise<T>
>TResult : TResult
>Promise : Promise<T>
>TResult : TResult
}
declare var p: Promise<void>;
>p : Promise<void>
>Promise : Promise<T>

async function func(): Promise<void> {
>func : () => Promise<void>
>Promise : Promise<T>

    "before";
    try {
        "try0.0";
        try {
            "try1.0";
            await p;
>await p : void
>p : Promise<void>

            "try1.1";
        } catch (e) {
>e : any

            "catch1";
        } finally {        
            "finally1";
        }
        "try0.1"
    } catch (e) {
>e : any

        "catch0";
    } finally {
        "finally0";
    }
    "after";
}

