=== tests/cases/compiler/promiseTypeInference.ts ===
declare class Promise1<T> {
>Promise1 : Promise1<T>
>T : T

    then<U>(success?: (value: T) => Promise1<U>): Promise1<U>;
>then : <U>(success?: (value: T) => Promise1<U>) => Promise1<U>
>U : U
>success : (value: T) => Promise1<U>
>value : T
>T : T
>Promise1 : Promise1<T>
>U : U
>Promise1 : Promise1<T>
>U : U
}
interface IPromise1<T> {
>IPromise1 : IPromise1<T>
>T : T

    then<U>(success?: (value: T) => IPromise1<U>): IPromise1<U>;
>then : <U>(success?: (value: T) => IPromise1<U>) => IPromise1<U>
>U : U
>success : (value: T) => IPromise1<U>
>value : T
>T : T
>IPromise1 : IPromise1<T>
>U : U
>IPromise1 : IPromise1<T>
>U : U
}
declare function load(name: string): Promise1<string>;
>load : (name: string) => Promise1<string>
>name : string
>Promise1 : Promise1<T>

declare function convert(s: string): IPromise1<number>;
>convert : (s: string) => IPromise1<number>
>s : string
>IPromise1 : IPromise1<T>

var $$x = load("something").then(s => convert(s));
>$$x : Promise1<number>
>load("something").then(s => convert(s)) : Promise1<number>
>load("something").then : <U>(success?: (value: string) => Promise1<U>) => Promise1<U>
>load("something") : Promise1<string>
>load : (name: string) => Promise1<string>
>then : <U>(success?: (value: string) => Promise1<U>) => Promise1<U>
>s => convert(s) : (s: string) => IPromise1<number>
>s : string
>convert(s) : IPromise1<number>
>convert : (s: string) => IPromise1<number>
>s : string

